plugins {
    id 'com.android.application'
}

def static internalBuildDate() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.demo.commapp"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "V1.00.00" + "_" + internalBuildDate()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        mykeystore {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('C:/application.keystore')
            storePassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.mykeystore
            versionNameSuffix "_D"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.mykeystore
            versionNameSuffix "_R"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            if (outputFileName != null && outputFileName.endsWith('.apk')) {
                def type = "D"
                if (variant.buildType.name == 'release') {
                    type = "R"
                }
                def fileName = "QBLink_${defaultConfig.versionName}_${type}.apk"
                outputFileName = fileName
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding true
    }


}

dependencies {
    implementation fileTree(dir: 'libs', includes: ['*jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.google.code.gson:gson:2.8.6'

//    implementation "androidx.activity:activity:1.3.0"
//    def fragment_version = "1.3.6"
//    implementation "androidx.fragment:fragment:$fragment_version"
//    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    def lifecycle_version = "2.4.0-alpha03"
    def arch_version = "2.1.0"


    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"

    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"

    // Annotation processor
//    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
//    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    implementation "io.reactivex.rxjava3:rxjava:3.0.12"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
}