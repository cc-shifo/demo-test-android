import java.text.SimpleDateFormat

plugins {
    id 'com.android.application'
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def static internalBuildDate() {//new Date()
    return new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
}
android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.demoh5jsnativecomm"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 1
        versionName "_v1.0_" + internalBuildDate()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding true
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            if (outputFileName != null && outputFileName.endsWith('.apk')) {
                def type = ""
                if (variant.buildType.name == 'debug') {
                    type = "_debug"
                }
                def fileName = "HT_DemoJsCallApp${defaultConfig.versionName}${type}.apk"
                outputFileName = fileName
            }
        }
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'pub.devrel:easypermissions:3.0.0'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation "io.reactivex.rxjava3:rxjava:3.1.3"
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'androidx.datastore:datastore-preferences:1.0.0'
    // optional - RxJava3 support
    implementation 'androidx.datastore:datastore-preferences-rxjava3:1.0.0'
    // Alternatively - use the following artifact without an Android dependency.
    // implementation "androidx.datastore:datastore-preferences-core:1.0.0"
    // preference
    // Java language implementation
    implementation 'androidx.preference:preference:1.2.0'

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}