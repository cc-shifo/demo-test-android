apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'checkstyle'
//apply plugin: 'findbugs'

archivesBaseName = 'essentials'
group = 'org.greenrobot'
version = '3.0.0-RC1'

sourceCompatibility = 1.7
targetCompatibility = '1.7'

def isSnapshot = version.endsWith('-SNAPSHOT')
def sonatypeRepositoryUrl
if(isSnapshot) {
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

repositories {
    mavenCentral()
}

configurations {
    deployerJars
    // include test classes and their dependencies
    tests.extendsFrom testRuntime
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.google.guava:guava:19.0' // Murmur3
    testImplementation 'net.jpountz.lz4:lz4:1.2.0' // xxHash

    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
}

javadoc {
    failOnError = false
    title = "Essentials ${version} API"
    options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2016 <a href="http://greenrobot.org">greenrobot.org</a>. All Rights Reserved.</i>'
    doLast {
        copy {
            from '../javadoc-style'
            into "build/docs/javadoc/"
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// build a jar with all test classes to allow usage as dependency in android test project
// https://discuss.gradle.org/t/how-do-i-declare-a-dependency-on-a-modules-test-code/7172/9
task testJar(type: Jar) {
    classifier "test"
    from sourceSets.test.output
    // exclude tests which can not run on Android
    exclude '**/*Jvm*'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
    tests testJar
}

signing {
    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
            project.hasProperty('signing.secretKeyRingFile')) {
        sign configurations.archives
    } else {
        println "Signing information missing/incomplete for ${project.name}"
    }
}

checkstyle {
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle-greenrobot.xml")
    configProperties.checkstyleSuppressionsFile = file("checkstyle-suppressions.xml")
    sourceSets = [sourceSets.main]
}

//findbugs {
//    toolVersion = '3.0.1'
//    excludeFilter = file("findbugs-exclude.xml")
//    effort = 'max'
//    // use reportLevel='medium' for more issues
//    reportLevel = 'high'
//    sourceSets = [sourceSets.main]
//}

//tasks.withType(FindBugs) {
//    reports {
//        // switch to html report
//        xml.enabled = false
//        html.enabled = true
//    }
//}

uploadArchives {
    repositories {
        mavenDeployer {
            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
                    && project.hasProperty('preferedPassword')) {
                configuration = configurations.deployerJars
                repository(url: preferedRepo) {
                    authentication(userName: preferedUsername, password: preferedPassword)
                }
            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            } else {
                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
            }
            pom.project {
                name 'greenrobot-essentials'
                packaging 'jar'
                description 'Essentials for high-performance Android and Java projects'
                url 'http://greenrobot.org/essentials/'

                scm {
                    url 'https://github.com/greenrobot/essentials'
                    connection 'scm:git@github.com:greenrobot/essentials.git'
                    developerConnection 'scm:git@github.com:greenrobot/essentials.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'greenrobot'
                        name 'greenrobot'
                    }
                }

                issueManagement {
                    system 'GitHub Issues'
                    url 'https://github.com/greenrobot/essentials/issues'
                }

                organization {
                    name 'greenrobot'
                    url 'http://greenrobot.org'
                }
            }
        }
    }
}